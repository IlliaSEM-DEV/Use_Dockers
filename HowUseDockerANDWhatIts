Що таке Докер?
Перш ніж ми розпочнемо наш короткий огляд контейнерів Docker, давайте розглянемо, як наша команда розробляє та розгортає додатки. Ми також коротко опишемо деякі 
проблеми, з якими стикаються наші команди.

Процес розробки та управління додатками у вашій компанії зазвичай включає одну або кілька команд. Існує команда розробників,
яка створює програмне забезпечення, та операційна команда, відповідальна за розгортання цих додатків. Операційна команда також 
відповідає за управління інфраструктурою розміщення додатків.

Наприклад, припустимо, що ми розробляємо портал відстеження замовлень для різних торгових точок нашої компанії. Під час процесу 
розробки та публікації наших додатків вони розміщуються в кількох середовищах. Спочатку команда розробників розробляє та тестує
програмне забезпечення в середовищі розробки. Звідси програмне забезпечення розгортається в середовищі забезпечення якості (QA), 
потім у передпродакшн та остаточне продакшн-середовищі.

У попередньому сценарії нам потрібно буде врахувати кілька проблем:

Керування середовищами хостингу

Різні середовища вимагають керування як програмним, так і апаратним забезпеченням. Ми повинні переконатися, що встановлене програмне 
забезпечення та налаштоване апаратне забезпечення в кожному з них однакові. Нам також потрібно налаштувати такі аспекти, як доступ до
мережі, зберігання даних та безпека для кожного середовища узгодженим та легко відтворюваним чином.

Безперервність у постачанні програмного забезпечення

Розгортання програм у наших середовищах має відбуватися послідовно. Кожен пакет розгортання повинен містити всі системні пакети, бінарні
файли, бібліотеки, файли конфігурації та інші елементи, які забезпечують повну функціональність програми. Нам також потрібно переконатися,
що всі ці залежності відповідають версіям програмного забезпечення та архітектурі.

Ефективне використання обладнання

Кожна розгорнута програма повинна виконуватися таким чином, щоб бути ізольованою від інших програм, що працюють на тому ж обладнанні. Ми 
прагнемо запускати більше однієї програми на одному сервері, щоб максимально ефективно використовувати ресурси, не ставлячи під загрозу роботу одне одного.

Портативність застосунків

Існує кілька причин, чому портативність програм є важливою. Середовище хостингу може вийти з ладу, або нам може знадобитися масштабувати 
нашу програму. В обох випадках потенційним результатом є перенесення нашого програмного забезпечення в нове середовище. Ми хочемо перенести 
програмне забезпечення з одного хоста на інший, навіть якщо базова інфраструктура відрізняється. Таке перенесення має відбутися якомога швидше,
щоб зменшити час простою для наших клієнтів.

Перш ніж ми розглянемо функції Docker, які допомагають вирішити ці проблеми, ми обговоримо кілька концепцій та коротко розглянемо архітектуру Docker.

Що таке контейнер?
Контейнер — це слабо ізольоване середовище, яке дозволяє нам створювати та запускати програмні пакети. Ці програмні пакети містять код та всі
залежності для швидкого та надійного запуску програм у будь-якому обчислювальному середовищі. Ми називаємо ці пакети образами контейнерів .

Образ контейнера стає одиницею, яку ми використовуємо для розповсюдження наших програм.

Що таке контейнеризація програмного забезпечення?
Контейнеризація програмного забезпечення — це метод віртуалізації ОС, який використовується для розгортання та запуску контейнерів без використання 
віртуальної машини (ВМ). Контейнери можуть працювати на фізичному обладнанні, у хмарі, на віртуальних машинах та на кількох операційних системах.

Що таке Докер?
Docker — це платформа контейнеризації, яка використовується для розробки, доставки та запуску контейнерів. Docker не використовує гіпервізор,
і ви можете запускати Docker на своєму настільному комп'ютері або ноутбуці, якщо розробляєте та тестуєте програми. Настільна версія Docker підтримує
Linux, Windows та macOS. Для виробничих систем Docker доступний для серверних середовищ, включаючи багато варіантів Linux та Microsoft Windows Server
2016 і вище. Багато хмарних сервісів, включаючи Azure, підтримують Docker.

Архітектура Docker
Платформа Docker складається з кількох компонентів, які ми використовуємо для створення, запуску та управління нашими контейнерними застосунками.

Двигун Докера
Docker Engine складається з кількох компонентів, налаштованих як клієнт-серверна реалізація, де клієнт і сервер працюють одночасно на одному хості.
Клієнт взаємодіє із сервером за допомогою REST API, що дозволяє клієнту також взаємодіяти з віддаленим екземпляром сервера.

Діаграма, що показує загальний огляд архітектури Docker.

Деякі стрілки показують зв'язок між Docker-сервером, запущеними контейнерами та збереженими образами контейнерів. Ці стрілки вказують, як Docker-сервер
завантажує збережені образи контейнерів та керує запущеними контейнерами.

Клієнт Docker
Існує два альтернативи для клієнта Docker: програма командного рядка з назвою dockerабо програма на основі графічного інтерфейсу користувача (GUI) під
назвою Docker Desktop. Як CLI, так і Docker Desktop взаємодіють із сервером Docker. dockerКоманди з CLI або Docker Desktop використовують Docker REST API
для надсилання інструкцій на локальний або віддалений сервер і функціонують як основний інтерфейс, який ми використовуємо для керування нашими контейнерами.

Сервер Docker
Сервер Docker — це демон з назвою dockerd. dockerdДемон відповідає на запити клієнтів через Docker REST API та може взаємодіяти з іншими демонами. 
Сервер Docker також відповідає за відстеження життєвого циклу наших контейнерів.

Об'єкти Docker
Існує кілька об'єктів, які ви створите та налаштуєте для підтримки розгортання контейнерів. До них належать мережі, томи сховищ, плагіни та інші 
службові об'єкти. Ми не розглядатимемо тут усі ці об'єкти, але варто пам'ятати, що ці об'єкти – це елементи, які ми можемо створювати та розгортати за потреби.

Докер-хаб
Docker Hub — це реєстр контейнерів Docker за принципом програмного забезпечення як послуги (SaaS). Реєстри Docker — це репозиторії, які ми використовуємо 
для зберігання та розповсюдження створених нами образів контейнерів. Docker Hub — це загальнодоступний реєстр за замовчуванням, який Docker використовує для керування образами.

Майте на увазі, що ви можете створити та використовувати приватний реєстр Docker або скористатися одним із багатьох доступних варіантів хмарних постачальників. 
Наприклад, ви можете використовувати Azure Container Registry для зберігання образів контейнерів для використання в кількох службах Azure з підтримкою контейнерів.


