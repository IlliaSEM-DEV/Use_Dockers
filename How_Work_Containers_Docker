Як працюють контейнери Docker

10 хвилин
Раніше ви дізналися, що контейнер стає одиницею, яку ви використовуватимете для розповсюдження своїх програм. Ви також дізналися, що контейнер має стандартизований формат, який використовують як ваші команди розробників, так і операційні команди.

У вашому прикладі ви розробляєте портал відстеження замовлень для різних торгових точок вашої компанії. Після створення образу Docker ваша операційна команда відповідає за розгортання, оновлення та керування вашим порталом відстеження замовлень.

У попередньому розділі ви розглядали, як створюється образ Docker. Тут ви трохи розглянете життєвий цикл контейнера Docker та способи керування ними. Ви також дізнаєтеся, як продумати налаштування сховища даних та мережевих параметрів для ваших контейнерів.

Як керувати контейнерами Docker
Контейнер Docker має життєвий цикл, який можна використовувати для керування та відстеження стану контейнера.

Діаграма, що показує життєвий цикл контейнера та перехід між фазами життєвого циклу.

Щоб перевести контейнер у стан виконання, скористайтеся командою run . Ви також можете перезапустити контейнер, який вже працює. Під час перезапуску контейнера він отримує сигнал завершення, щоб дозволити будь-яким запущеним процесам коректно завершити роботу до завершення роботи ядра контейнера.

Контейнер вважається запущеним, доки його не буде призупинено, зупинено або завершено. Однак контейнер також може самостійно вийти з запущеного стану. Контейнер може самостійно завершити роботу після завершення запущеного процесу або якщо процес переходить у стан помилки.

Щоб призупинити запущений контейнер, скористайтеся pauseкомандою. Ця команда призупиняє всі процеси в контейнері.

Щоб зупинити запущений контейнер, скористайтеся stopкомандою . stopКоманда дозволяє робочому процесу коректно завершити роботу, надсилаючи йому сигнал завершення. Ядро контейнера завершує роботу після завершення процесу.

Якщо вам потрібно завершити роботу контейнера, скористайтеся killкомандою для надсилання сигналу kill. Ядро контейнера фіксує сигнал kill, але запущений процес – ні. Ця команда примусово завершує робочий процес у контейнері.

Нарешті, щоб видалити контейнери, які перебувають у зупиненому стані, скористайтеся removeкомандою. Після видалення контейнера всі дані, що зберігаються в ньому, знищуються.

Як переглянути доступні контейнери
Щоб переглянути список запущених контейнерів, виконайте docker psкоманду. Щоб переглянути всі контейнери у всіх станах, передайте -aаргумент.

Ось приклад:

Консоль

Копіювати
docker ps -a
Ось результат виконання цієї команди:

Вихід

Копіювати
CONTAINER ID    IMAGE        COMMAND         CREATED       STATUS           PORTS        NAMES
d93d40cc1ce9    tmp-ubuntu:latest  "dotnet website.dll …"  6 seconds ago    Up 5 seconds        8080/tcp      happy_wilbur
33a6cf71f7c1    tmp-ubuntu:latest  "dotnet website.dll …"  2 hours ago     Exited (0) 9 seconds ago            adoring_borg
У попередньому висновку є три пункти для розгляду:

Ім'я образу, зазначене у стовпці IMAGE ; у цьому прикладі tmp-ubuntu: latest . Зверніть увагу, що ви можете створювати більше одного контейнера з одного образу. Це потужна функція керування, яку можна використовувати для масштабування ваших рішень.

Стан контейнера, зазначений у стовпці STATUS . У цьому прикладі у вас є один контейнер, що працює, та один контейнер, який завершив роботу. Стан контейнера зазвичай є першим показником його справності.

Ім'я контейнера, зазначене у стовпці NAMES . Окрім ідентифікатора контейнера у першому стовпці, контейнери також отримують ім'я. У цьому прикладі ви не вказали ім'я для кожного контейнера явно, і в результаті Docker надав контейнеру випадкове ім'я. Щоб надати контейнеру явне ім'я за допомогою --nameпрапора, скористайтеся runкомандою.

Чому контейнерам дають назву?
Ця функція дозволяє запускати кілька екземплярів контейнерів одного й того ж образу. Назви контейнерів унікальні, а це означає, що якщо ви вкажете назву, ви не зможете повторно використати цю назву для створення нового контейнера. Єдиний спосіб повторно використати певну назву – це видалити попередній контейнер.

Як запустити контейнер
Щоб запустити контейнер, скористайтеся docker runкомандою. Вам потрібно лише вказати образ для запуску з його назвою або ідентифікатором, щоб запустити контейнер з образу. Контейнер, запущений таким чином, забезпечує інтерактивний досвід.

Тут, щоб запустити контейнер з нашим вебсайтом у фоновому режимі, додайте -dпрапорець.

Консоль

Копіювати
docker run -d tmp-ubuntu
У цьому випадку команда повертає лише ідентифікатор нового контейнера.

Після того, як ви вкажете образ для запуску, Docker знаходить образ, завантажує контейнер з образу та виконує команду, вказану як точку входу. Саме в цей момент контейнер доступний для керування.

Як призупинити контейнер
Щоб призупинити контейнер, виконайте docker pauseкоманду. Ось приклад:

Консоль

Копіювати
docker pause happy_wilbur
Призупинення контейнера призупиняє всі процеси. Ця команда дозволяє контейнеру продовжувати процеси на пізнішому етапі. docker unpauseКоманда відновлює призупинення всіх процесів у вказаних контейнерах.

Як перезапустити контейнер
Щоб перезапустити контейнери, виконайте docker restartкоманду. Ось приклад:

Консоль

Копіювати
docker restart happy_wilbur
Контейнер отримує команду зупинки, а потім команду запуску. Якщо контейнер не відповідає на команду зупинки, то надсилається сигнал завершення.

Як зупинити контейнер
Щоб зупинити запущений контейнер, виконайте docker stopкоманду. Ось приклад:

Консоль

Копіювати
docker stop happy_wilbur
Команда stop надсилає сигнал завершення до контейнера та процесів, що працюють у контейнері.

Як видалити контейнер
Щоб видалити контейнер, виконайте docker rmкоманду. Ось приклад:

Консоль

Копіювати
docker rm happy_wilbur
Після видалення контейнера всі дані в ньому знищуються. Важливо завжди розглядати контейнери як тимчасові, коли йдеться про зберігання даних.

Конфігурація сховища контейнерів Docker
Як ми вже описали раніше, завжди розглядайте контейнери як тимчасові, коли застосунку в контейнері потрібно зберігати дані.

Припустимо, що ваш портал відстеження створює файл журналу в підпапці кореневого каталогу програми, тобто безпосередньо у файловій системі контейнера. Коли ваша програма записує дані до файлу журналу, система записує ці дані на рівень контейнера, придатний для запису.

Хоча цей підхід працює, він, на жаль, має кілька недоліків.

Зберігання контейнерів є тимчасовим.

Ваш файл журналу не зберігатиметься між екземплярами контейнера. Наприклад, припустимо, що ви зупиняєте та видаляєте контейнер. Коли ви запускаєте новий екземпляр контейнера, він базується на вказаному образі, і всі ваші попередні дані будуть відсутні. Пам’ятайте, що всі дані в контейнері знищуються разом із ним, коли ви видаляєте контейнер.

Сховище контейнерів пов'язане з базовою хост-машиною.

Отримати доступ до файлу журналу або перемістити його з контейнера складно, оскільки контейнер пов'язаний з базовою хост-машиною. Щоб отримати доступ до файлу, потрібно підключитися до екземпляра контейнера.

Контейнерні накопичувачі менш продуктивні.

Контейнери реалізують драйвер сховища, щоб дозволити вашим програмам записувати дані. Цей драйвер вводить додаткову абстракцію для зв'язку з ядром хост-ОС і є менш продуктивним, ніж запис безпосередньо у файлову систему хоста.

Контейнери можуть використовувати два варіанти для збереження даних. Перший варіант — використання томів , а другий — прив’язка монтувань .

Що таке том?
Том зберігається на файловій системі хоста в певній папці. Виберіть папку, де, як ви знаєте, дані не будуть змінені процесами, що не належать до Docker.

Docker створює та керує новим томом, виконавши docker volume createкоманду. Ця команда може бути частиною нашого визначення Dockerfile, що означає, що ви можете створювати томи як частину процесу створення контейнера. Docker створює том, якщо він не існує, коли ви намагаєтеся змонтувати том у контейнер вперше.

Томи зберігаються в каталогах на файловій системі хоста. Docker монтує та керує томами в контейнері. Після монтування ці томи ізолюють від хост-машини.

Кілька контейнерів можуть одночасно використовувати ті самі томи. Томи також не видаляються автоматично, коли контейнер перестає використовувати цей том.

У цьому прикладі ви можете створити каталог на нашому хості контейнера та змонтувати цей том до контейнера під час створення контейнера tracking-portal. Коли ваш портал відстеження реєструє дані, ви можете отримати доступ до цієї інформації через файлову систему хоста контейнера. Ви матимете доступ до цього файлу журналу, навіть якщо ваш контейнер буде видалено.

Docker також надає стороннім компаніям можливість створювати доповнення для використання як томи. Наприклад, Azure Storage надає плагін для монтування Azure Storage як томів на контейнерах Docker.

Що таке монтування прив'язки?
Прив'язане монтування концептуально те саме, що й том; однак замість використання певної папки ви можете монтувати будь-який файл або папку на хості. Ви також очікуєте, що хост може змінювати вміст цих монтувань. Як і у випадку з томами, прив'язане монтування створюється, якщо ви його монтуєте, а воно ще не існує на хості.

Прив'язані монтування мають обмежену функціональність порівняно з томами, і хоча вони продуктивніші, вони залежать від наявності певної структури папок на хості.

Томи вважаються найкращою стратегією зберігання даних для використання з контейнерами.

Для контейнерів Windows доступний інший варіант: ви можете змонтувати шлях SMB як том і представити його контейнерам. Це дозволяє контейнерам на різних хостах використовувати одне й те саме постійне сховище.

Конфігурація мережі контейнерів Docker
Стандартна конфігурація мережі Docker дозволяє ізолювати контейнери на хості Docker. Ця функція дозволяє створювати та налаштовувати програми, які можуть безпечно взаємодіяти одна з одною.

Docker пропонує різні мережеві налаштування для Linux та Windows.

Для Linux існує шість попередньо налаштованих мережевих параметрів:

Міст
Хост
Накладання
IPvLan
MACvLan
Жоден
Для Windows існує шість попередньо налаштованих параметрів мережі:

NAT (трансляція мережевих адрес)
Прозорий
Накладання
L2Bridge
L2Tunnel
Жоден
Ви можете вибрати, яку з цих мережевих конфігурацій застосувати до вашого контейнера, залежно від його мережевих вимог.

Що таке мережа мостів?
Мережа мосту – це конфігурація за замовчуванням, яка застосовується до контейнерів під час запуску без вказівки будь-якої іншої конфігурації мережі. Ця мережа є внутрішньою, приватною мережею, що використовується контейнером, і вона ізолює мережу контейнера від мережі хоста Docker.

Кожному контейнеру в мережі мосту призначається IP-адреса та маска підмережі, причому ім'я хоста за замовчуванням дорівнює імені контейнера. Контейнерам, підключеним до мережі мосту за замовчуванням, дозволено доступ до інших контейнерів, підключених до мосту, за IP-адресою. Мережа мосту не дозволяє зв'язок між контейнерами за допомогою імен хостів.

За замовчуванням Docker не публікує жодних портів контейнерів. Щоб увімкнути зіставлення портів між портами контейнера та портами хоста Docker, використовуйте --publishпрапорець порту Docker.

Прапорець публікації фактично налаштовує правило брандмауера, яке відображає порти.

У цьому прикладі ваш портал відстеження доступний для клієнтів, які переглядають порт 80. Вам потрібно буде зіставити порт 80 з контейнера з доступним портом на хості. У вас відкритий порт 8080 на хості, що дозволяє встановити прапорець ось так:

Консоль

Копіювати
--publish 8080:80
Будь-який клієнт, який переглядає IP-адресу хоста Docker та порт 8080, може отримати доступ до порталу відстеження.

Окрім конфігурацій, специфічних для Linux, мережа NAT на хостах Windows функціонує так само, як і мережа-міст. Крім того, NAT є мережею за замовчуванням у Windows, і всі контейнери підключатимуться до неї, якщо не вказано інше.

Що таке хост-мережа?
Мережа хоста дозволяє запускати контейнер безпосередньо в мережі хоста. Така конфігурація ефективно усуває ізоляцію між хостом і контейнером на мережевому рівні.

У цьому прикладі припустимо, що ви вирішили змінити конфігурацію мережі на опцію мережі хоста. Ваш портал відстеження все ще доступний за допомогою IP-адреси хоста. Тепер ви можете використовувати добре відомий порт 80 замість зіставленого порту.

Майте на увазі, що контейнер може використовувати лише порти, які хост ще не використовує.

У Windows мережа хоста недоступна. На хостах Windows немає можливості спільного використання IP-адреси (мережевого стеку) між хостом і контейнером. Мережа NAT функціонує подібно до мережі-міста, а опція Overlay надає контейнеру IP-адресу з тієї ж мережі, що й хост, але не ту саму IP-адресу.

Накладання та інші параметри мережі
Для більш складних сценаріїв, як Linux, так і Windows пропонують додаткові мережеві опції. Наприклад, опція накладання створює віртуальний комутатор з хост-мережі, тому контейнери в цій мережі можуть отримувати IP-адреси від DHCP-серверів або працювати з IP-адресами з цього сегмента мережі. Крім того, Docker дозволяє стороннім постачальникам створювати мережеві плагіни.

Що таке мережа «ні»?
Щоб вимкнути мережу для контейнерів, скористайтеся параметром «без мережі». Це може бути корисним, якщо у вас є програма, яка не використовує мережу, або якщо ви просто хочете перевірити, чи програма працює належним чином у контейнері.

Міркування щодо операційної системи
Майте на увазі, що між операційними системами для настільних комп’ютерів існують відмінності щодо параметрів конфігурації мережі Docker. Наприклад, мережевий інтерфейс Docker0 недоступний у macOS під час використання мережі-мост, а використання конфігурації хост-мережі не підтримується як для настільних комп’ютерів Windows, так і для macOS.

Ці відмінності можуть вплинути на те, як ваші розробники налаштовують свій робочий процес для керування розробкою контейнерів. Крім того, оркестратори контейнерів можуть також надавати інші мережеві конфігурації на додаток до налаштувань Docker.
